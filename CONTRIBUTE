HOW TO CONTRIBUTE TO TQDM
=========================

This file describes how to contribute changes to the project, and how to
upload to the pypi repository.


HOW TO COMMIT YOUR CONTRIBUTIONS
--------------------------------

Contributions to the project is made using the "Fork & Pull" model. Here's a
quickstart on how to do that (your mileage may vary depending on your git
config):

- create an account on [github](https://github.com)
- fork [tqdm](https://github.com/tqdm/tqdm)
- make a local clone: `git clone https://github.com/your_account/tqdm.git`
- make your changes on your local copy
- commit your changes `git commit -m "my message"`
- TEST YOUR CHANGES (see below)
- `push` to your github account: `git push origin`
- finally, create a Pull Request (PR) from your github fork
(go to your fork's webpage and click on "Pull Request."
You can then add a message to describe your proposal.)


TESTING
-------

To test functionality on your machine (such as before submitting a Pull
Request), there are a number of unit tests.

To run the tests,

- install `tox`
- `cd` to the root of the `tqdm` directory (in the same folder as this file)
- run the following commands:

```
make test
make coverage
make flake8
```

Alternatively (if you can't use `make`)

- install `nosetest`
- run the following commands:

```
nosetests --with-coverage --cover-package=tqdm -v tqdm/
python -m flake8 tqdm/_tqdm.py
```


SEMANTIC VERSIONING
-------------------

The tqdm repository managers should regularly bump the version number in the
VERSION file to follow the [Semantic Versioning](http://semver.org/)
convention.

Tools can be used to automate this process, such as
[bumpversion](https://github.com/peritus/bumpversion) or
[python-semanticversion](https://github.com/rbarrois/python-semanticversion/)
to automate this task.

The managers should take care of this instead of users to avoid PR conflicts
solely due to the VERSION file bumping.


BUILDING A RELEASE AND UPLOADING TO PYPI
----------------------------------------

First, check `setup.py` and `MANIFEST.in`, which define the packaging
process and info that will be uploaded to [pypi](pypi.python.org).

Check the result by using the following commands:

```
python setup.py develop --uninstall
python setup.py develop
```

Secondly, build tqdm into a distributable python package:

```
python setup.py sdist --formats=gztar,zip bdist_wininst --plat-name=win32
python setup.py sdist bdist_wheel --plat-name=win32
```

This will generate several builds in the `dist/` folder.

Finally, we can upload everything to pypi. Uploading to pypi can be done
easily using the [twine](https://github.com/pypa/twine) module:

```
twine upload dist/*
```

NOTE:

- you can also test on the pypi test servers `testpypi.python.org/pypi`
before the real deployment
- in case of a mistake, you can delete an uploaded release on pypi, but you
cannot re-upload another with the same version number!

Also, the new release can be added to the Github by creating a new release
from the web interface.
